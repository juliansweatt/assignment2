(a)
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 1.03 KiB | 1.03 MiB/s, done.
Total 3 (delta 1), reused 0 (delta 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/juliansweatt/assignment2.git
   f4975e5..d891568  master -> master

(b) 10 commits, 6 by Esteban and 4 by myself (note it would be 9 but
    I made a mistake creating this file.) The `git log` command was used
    to gather this information.

(c) 2019-09-25 18:13:30
    The command `git blame` was used.

(d) i.  Build two independent versions or features within a large
        system, without interfering with the main version or other
        developer's actively developing features. These independent
        versions could be maintained on separate branches.
    ii. Branches allow for easier code merging. Rather than
        frequently rectifying codebase differences with other developers,
        large features can be merged together all at once by merging
        multiple organized branches. 

(e) `git status` is used to view the current staging area, meaning,
    files in a commit, files that have been altered but are not committed,
    and files that are explicitly un-tracked. `git log` displays the commits,
    or working history of the repository, with the capability to filter and sort
    these results. In summary, `git status` displays changes to the staging
    area `git log` had the ability to view the full repository history.

(f) `git log Vehicle.h` will show commits which changed `Vehicle.h`.
    Note, --follow can be used to follow the file's content though renames.

(g) `git log --grep=file` will show commits containing the word `file` in the
    commit message. 

(h) i.   Inheritance is a concept which allows functionality and data 
         to be passed down to child functions, classes, methods, etc.
         For example, common functionality of a Vehicle class could be
         inherited by the Car and Boat classes.
    ii.  Polymorphism is a concept which allows functions with the same name
         to have different defined functionality based on the class they belong to
         or the data type passed in to it.
    iii. Encapsulation is the concept of binding data with the code
         that manipulates it. For example, in a video game, the NPC class
         could only have their Health Points changed by internal functions.

(i) The Integration Manager workflow grants every developed their own
    public repository, while the Dictator and Lieutenants model does not.
    In the Integration Manager workflow, the public repositories of each
    developer may then push to a central integration manager which resolves conflicts
    between developer versions, to be pushed to a master or central repository which
    developers pull from. The Dictator and Lieutenants model, however, allows
    developers to push to one of several assigned lieutenants, resolving some conflicts
    between those developers' versions, then the lieutenants may push to the
    dictator, which is the only way to push to the main repository (which then
    can be pulled by developers). Essentially, the Dictator and Lieutenants model
    is a tiered authority system, while the Integration Manager workflow is more democratic.

(j) The Dictator & Lieutenants workflow would benefit a large development team
    by allowing sub-teams to share a lieutenant, thus reducing the amount of developers
    needed to resolve conflicts, and reducing the complexity and size of merges. A centralized
    system would require large merges, potentially between developers who aren't involved in the
    development of the particular part of code their merge will affect. 


Part 5:
Encapsulation and Polymorphism are both used throughout the driving simulator. For example,
the Car class exhibits both properties. Polymorphism is used in the Car constructors, as there
is a Car() constructor and a Car(string brand, string model, string fuelType, string engineSize)
constructor. This allows Car to be constructed using default parameters or using explicitly
defined parameters. Car also exhibits encapsulation in that internal data is accessed and set
using helper functions. Notably, getEngineSize() and setEngineSize(string) are used rather than
exposing the myEngineSize variable outside of the class. Encapsulating Car data ensures that it
will only be accessed or altered in ways expected by the designer of the class. These concepts
are used throughout the other classes in the driving simulator. 
